// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 51;
	objects = {

/* Begin PBXBuildFile section */
		061B2349EAF62B6C1033AEE8 /* Pods_MtG_Deck_BuilderUITests.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 16A7DA88F8CA0C64D18D7DCC /* Pods_MtG_Deck_BuilderUITests.framework */; };
		53D57442806D38730EE0696F /* Pods_MtG_Deck_Builder.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 5B6F244B836BE84177A7B8D6 /* Pods_MtG_Deck_Builder.framework */; };
		C9411CE165491F5968A76027 /* Pods_MtG_Deck_BuilderTests.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 922C568CD74D2AED784BF57E /* Pods_MtG_Deck_BuilderTests.framework */; };
		E4A4764B22F441B300702AAB /* CardsResponse.swift in Sources */ = {isa = PBXBuildFile; fileRef = E4A4764A22F441B300702AAB /* CardsResponse.swift */; };
		E4BBE6C523756EF20053E2D2 /* CardsListPresenter.swift in Sources */ = {isa = PBXBuildFile; fileRef = E4BBE6C423756EF20053E2D2 /* CardsListPresenter.swift */; };
		E4BBE6C723756F2B0053E2D2 /* CardsListView.swift in Sources */ = {isa = PBXBuildFile; fileRef = E4BBE6C623756F2B0053E2D2 /* CardsListView.swift */; };
		E4BBE6C92375733F0053E2D2 /* CardsListViewState.swift in Sources */ = {isa = PBXBuildFile; fileRef = E4BBE6C82375733F0053E2D2 /* CardsListViewState.swift */; };
		E4D9AC5222AA4F3900EB4E1C /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = E4D9AC5122AA4F3900EB4E1C /* AppDelegate.swift */; };
		E4D9AC5422AA4F3900EB4E1C /* CardsListController.swift in Sources */ = {isa = PBXBuildFile; fileRef = E4D9AC5322AA4F3900EB4E1C /* CardsListController.swift */; };
		E4D9AC5922AA4F3B00EB4E1C /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = E4D9AC5822AA4F3B00EB4E1C /* Assets.xcassets */; };
		E4D9AC5C22AA4F3B00EB4E1C /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = E4D9AC5A22AA4F3B00EB4E1C /* LaunchScreen.storyboard */; };
		E4D9AC6722AA4F3B00EB4E1C /* MtG_Deck_BuilderTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = E4D9AC6622AA4F3B00EB4E1C /* MtG_Deck_BuilderTests.swift */; };
		E4D9AC7222AA4F3B00EB4E1C /* MtG_Deck_BuilderUITests.swift in Sources */ = {isa = PBXBuildFile; fileRef = E4D9AC7122AA4F3B00EB4E1C /* MtG_Deck_BuilderUITests.swift */; };
		E4E2A8A122AAAD8F00F845DB /* CardsRepository.swift in Sources */ = {isa = PBXBuildFile; fileRef = E4E2A8A022AAAD8F00F845DB /* CardsRepository.swift */; };
		E4E2A8A522AAB11200F845DB /* Card.swift in Sources */ = {isa = PBXBuildFile; fileRef = E4E2A8A422AAB11200F845DB /* Card.swift */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		E4D9AC6322AA4F3B00EB4E1C /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = E4D9AC4622AA4F3900EB4E1C /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = E4D9AC4D22AA4F3900EB4E1C;
			remoteInfo = "MtG Deck Builder";
		};
		E4D9AC6E22AA4F3B00EB4E1C /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = E4D9AC4622AA4F3900EB4E1C /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = E4D9AC4D22AA4F3900EB4E1C;
			remoteInfo = "MtG Deck Builder";
		};
/* End PBXContainerItemProxy section */

/* Begin PBXFileReference section */
		16A7DA88F8CA0C64D18D7DCC /* Pods_MtG_Deck_BuilderUITests.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_MtG_Deck_BuilderUITests.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		28B9CF37B20D88347EFFA06D /* Pods-MtG Deck BuilderUITests.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-MtG Deck BuilderUITests.release.xcconfig"; path = "Target Support Files/Pods-MtG Deck BuilderUITests/Pods-MtG Deck BuilderUITests.release.xcconfig"; sourceTree = "<group>"; };
		3989EEA04631FFD3F6AC5133 /* Pods-MtG Deck BuilderUITests.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-MtG Deck BuilderUITests.debug.xcconfig"; path = "Target Support Files/Pods-MtG Deck BuilderUITests/Pods-MtG Deck BuilderUITests.debug.xcconfig"; sourceTree = "<group>"; };
		50BD8F51EE26C509DC12CACC /* Pods-MtG Deck Builder.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-MtG Deck Builder.debug.xcconfig"; path = "Target Support Files/Pods-MtG Deck Builder/Pods-MtG Deck Builder.debug.xcconfig"; sourceTree = "<group>"; };
		5B6F244B836BE84177A7B8D6 /* Pods_MtG_Deck_Builder.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_MtG_Deck_Builder.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		640F311ABD532EDB71AE2C4E /* Pods-MtG Deck BuilderTests.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-MtG Deck BuilderTests.release.xcconfig"; path = "Target Support Files/Pods-MtG Deck BuilderTests/Pods-MtG Deck BuilderTests.release.xcconfig"; sourceTree = "<group>"; };
		922C568CD74D2AED784BF57E /* Pods_MtG_Deck_BuilderTests.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_MtG_Deck_BuilderTests.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		B3785CC3A38DC591AF3B4A52 /* Pods-MtG Deck BuilderTests.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-MtG Deck BuilderTests.debug.xcconfig"; path = "Target Support Files/Pods-MtG Deck BuilderTests/Pods-MtG Deck BuilderTests.debug.xcconfig"; sourceTree = "<group>"; };
		C65193DF0808C124383FB4F1 /* Pods-MtG Deck Builder.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-MtG Deck Builder.release.xcconfig"; path = "Target Support Files/Pods-MtG Deck Builder/Pods-MtG Deck Builder.release.xcconfig"; sourceTree = "<group>"; };
		E4A4764A22F441B300702AAB /* CardsResponse.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CardsResponse.swift; sourceTree = "<group>"; };
		E4BBE6C423756EF20053E2D2 /* CardsListPresenter.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CardsListPresenter.swift; sourceTree = "<group>"; };
		E4BBE6C623756F2B0053E2D2 /* CardsListView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CardsListView.swift; sourceTree = "<group>"; };
		E4BBE6C82375733F0053E2D2 /* CardsListViewState.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CardsListViewState.swift; sourceTree = "<group>"; };
		E4D9AC4E22AA4F3900EB4E1C /* MtG Deck Builder.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = "MtG Deck Builder.app"; sourceTree = BUILT_PRODUCTS_DIR; };
		E4D9AC5122AA4F3900EB4E1C /* AppDelegate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
		E4D9AC5322AA4F3900EB4E1C /* CardsListController.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CardsListController.swift; sourceTree = "<group>"; };
		E4D9AC5822AA4F3B00EB4E1C /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
		E4D9AC5B22AA4F3B00EB4E1C /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
		E4D9AC5D22AA4F3B00EB4E1C /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
		E4D9AC6222AA4F3B00EB4E1C /* MtG Deck BuilderTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = "MtG Deck BuilderTests.xctest"; sourceTree = BUILT_PRODUCTS_DIR; };
		E4D9AC6622AA4F3B00EB4E1C /* MtG_Deck_BuilderTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MtG_Deck_BuilderTests.swift; sourceTree = "<group>"; };
		E4D9AC6822AA4F3B00EB4E1C /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
		E4D9AC6D22AA4F3B00EB4E1C /* MtG Deck BuilderUITests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = "MtG Deck BuilderUITests.xctest"; sourceTree = BUILT_PRODUCTS_DIR; };
		E4D9AC7122AA4F3B00EB4E1C /* MtG_Deck_BuilderUITests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MtG_Deck_BuilderUITests.swift; sourceTree = "<group>"; };
		E4D9AC7322AA4F3B00EB4E1C /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
		E4E2A8A022AAAD8F00F845DB /* CardsRepository.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CardsRepository.swift; sourceTree = "<group>"; };
		E4E2A8A422AAB11200F845DB /* Card.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Card.swift; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		E4D9AC4B22AA4F3900EB4E1C /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				53D57442806D38730EE0696F /* Pods_MtG_Deck_Builder.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		E4D9AC5F22AA4F3B00EB4E1C /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				C9411CE165491F5968A76027 /* Pods_MtG_Deck_BuilderTests.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		E4D9AC6A22AA4F3B00EB4E1C /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				061B2349EAF62B6C1033AEE8 /* Pods_MtG_Deck_BuilderUITests.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		0A37A5E3C7DD3EE6383BAC2A /* Pods */ = {
			isa = PBXGroup;
			children = (
				50BD8F51EE26C509DC12CACC /* Pods-MtG Deck Builder.debug.xcconfig */,
				C65193DF0808C124383FB4F1 /* Pods-MtG Deck Builder.release.xcconfig */,
				B3785CC3A38DC591AF3B4A52 /* Pods-MtG Deck BuilderTests.debug.xcconfig */,
				640F311ABD532EDB71AE2C4E /* Pods-MtG Deck BuilderTests.release.xcconfig */,
				3989EEA04631FFD3F6AC5133 /* Pods-MtG Deck BuilderUITests.debug.xcconfig */,
				28B9CF37B20D88347EFFA06D /* Pods-MtG Deck BuilderUITests.release.xcconfig */,
			);
			path = Pods;
			sourceTree = "<group>";
		};
		0A43274F18E5BF372A115869 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				5B6F244B836BE84177A7B8D6 /* Pods_MtG_Deck_Builder.framework */,
				922C568CD74D2AED784BF57E /* Pods_MtG_Deck_BuilderTests.framework */,
				16A7DA88F8CA0C64D18D7DCC /* Pods_MtG_Deck_BuilderUITests.framework */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
		E4BBE6C223756EB30053E2D2 /* presentation */ = {
			isa = PBXGroup;
			children = (
				E4BBE6C323756EBB0053E2D2 /* cardslist */,
			);
			path = presentation;
			sourceTree = "<group>";
		};
		E4BBE6C323756EBB0053E2D2 /* cardslist */ = {
			isa = PBXGroup;
			children = (
				E4D9AC5322AA4F3900EB4E1C /* CardsListController.swift */,
				E4BBE6C423756EF20053E2D2 /* CardsListPresenter.swift */,
				E4BBE6C623756F2B0053E2D2 /* CardsListView.swift */,
				E4BBE6C82375733F0053E2D2 /* CardsListViewState.swift */,
			);
			path = cardslist;
			sourceTree = "<group>";
		};
		E4D9AC4522AA4F3900EB4E1C = {
			isa = PBXGroup;
			children = (
				E4D9AC5022AA4F3900EB4E1C /* MtG Deck Builder */,
				E4D9AC6522AA4F3B00EB4E1C /* MtG Deck BuilderTests */,
				E4D9AC7022AA4F3B00EB4E1C /* MtG Deck BuilderUITests */,
				E4D9AC4F22AA4F3900EB4E1C /* Products */,
				0A37A5E3C7DD3EE6383BAC2A /* Pods */,
				0A43274F18E5BF372A115869 /* Frameworks */,
			);
			sourceTree = "<group>";
		};
		E4D9AC4F22AA4F3900EB4E1C /* Products */ = {
			isa = PBXGroup;
			children = (
				E4D9AC4E22AA4F3900EB4E1C /* MtG Deck Builder.app */,
				E4D9AC6222AA4F3B00EB4E1C /* MtG Deck BuilderTests.xctest */,
				E4D9AC6D22AA4F3B00EB4E1C /* MtG Deck BuilderUITests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		E4D9AC5022AA4F3900EB4E1C /* MtG Deck Builder */ = {
			isa = PBXGroup;
			children = (
				E4BBE6C223756EB30053E2D2 /* presentation */,
				E4E2A89F22AAAD5800F845DB /* data */,
				E4D9AC5122AA4F3900EB4E1C /* AppDelegate.swift */,
				E4D9AC5822AA4F3B00EB4E1C /* Assets.xcassets */,
				E4D9AC5A22AA4F3B00EB4E1C /* LaunchScreen.storyboard */,
				E4D9AC5D22AA4F3B00EB4E1C /* Info.plist */,
			);
			path = "MtG Deck Builder";
			sourceTree = "<group>";
		};
		E4D9AC6522AA4F3B00EB4E1C /* MtG Deck BuilderTests */ = {
			isa = PBXGroup;
			children = (
				E4D9AC6622AA4F3B00EB4E1C /* MtG_Deck_BuilderTests.swift */,
				E4D9AC6822AA4F3B00EB4E1C /* Info.plist */,
			);
			path = "MtG Deck BuilderTests";
			sourceTree = "<group>";
		};
		E4D9AC7022AA4F3B00EB4E1C /* MtG Deck BuilderUITests */ = {
			isa = PBXGroup;
			children = (
				E4D9AC7122AA4F3B00EB4E1C /* MtG_Deck_BuilderUITests.swift */,
				E4D9AC7322AA4F3B00EB4E1C /* Info.plist */,
			);
			path = "MtG Deck BuilderUITests";
			sourceTree = "<group>";
		};
		E4E2A89F22AAAD5800F845DB /* data */ = {
			isa = PBXGroup;
			children = (
				E4E2A8A322AAB0FA00F845DB /* model */,
				E4E2A8A222AAB0E800F845DB /* service */,
			);
			path = data;
			sourceTree = "<group>";
		};
		E4E2A8A222AAB0E800F845DB /* service */ = {
			isa = PBXGroup;
			children = (
				E4E2A8A022AAAD8F00F845DB /* CardsRepository.swift */,
			);
			path = service;
			sourceTree = "<group>";
		};
		E4E2A8A322AAB0FA00F845DB /* model */ = {
			isa = PBXGroup;
			children = (
				E4E2A8A422AAB11200F845DB /* Card.swift */,
				E4A4764A22F441B300702AAB /* CardsResponse.swift */,
			);
			path = model;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		E4D9AC4D22AA4F3900EB4E1C /* MtG Deck Builder */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = E4D9AC7622AA4F3B00EB4E1C /* Build configuration list for PBXNativeTarget "MtG Deck Builder" */;
			buildPhases = (
				FFDE37362CD11E978B09BF0F /* [CP] Check Pods Manifest.lock */,
				E4D9AC4A22AA4F3900EB4E1C /* Sources */,
				E4D9AC4B22AA4F3900EB4E1C /* Frameworks */,
				E4D9AC4C22AA4F3900EB4E1C /* Resources */,
				CBBA3AA505ABCE9D8A001904 /* [CP] Embed Pods Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = "MtG Deck Builder";
			productName = "MtG Deck Builder";
			productReference = E4D9AC4E22AA4F3900EB4E1C /* MtG Deck Builder.app */;
			productType = "com.apple.product-type.application";
		};
		E4D9AC6122AA4F3B00EB4E1C /* MtG Deck BuilderTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = E4D9AC7922AA4F3B00EB4E1C /* Build configuration list for PBXNativeTarget "MtG Deck BuilderTests" */;
			buildPhases = (
				C81F9C457F2476C4DAB2ED39 /* [CP] Check Pods Manifest.lock */,
				E4D9AC5E22AA4F3B00EB4E1C /* Sources */,
				E4D9AC5F22AA4F3B00EB4E1C /* Frameworks */,
				E4D9AC6022AA4F3B00EB4E1C /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				E4D9AC6422AA4F3B00EB4E1C /* PBXTargetDependency */,
			);
			name = "MtG Deck BuilderTests";
			productName = "MtG Deck BuilderTests";
			productReference = E4D9AC6222AA4F3B00EB4E1C /* MtG Deck BuilderTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		E4D9AC6C22AA4F3B00EB4E1C /* MtG Deck BuilderUITests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = E4D9AC7C22AA4F3B00EB4E1C /* Build configuration list for PBXNativeTarget "MtG Deck BuilderUITests" */;
			buildPhases = (
				ADB9E8BEABA74C346A4740E3 /* [CP] Check Pods Manifest.lock */,
				E4D9AC6922AA4F3B00EB4E1C /* Sources */,
				E4D9AC6A22AA4F3B00EB4E1C /* Frameworks */,
				E4D9AC6B22AA4F3B00EB4E1C /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				E4D9AC6F22AA4F3B00EB4E1C /* PBXTargetDependency */,
			);
			name = "MtG Deck BuilderUITests";
			productName = "MtG Deck BuilderUITests";
			productReference = E4D9AC6D22AA4F3B00EB4E1C /* MtG Deck BuilderUITests.xctest */;
			productType = "com.apple.product-type.bundle.ui-testing";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		E4D9AC4622AA4F3900EB4E1C /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastSwiftUpdateCheck = 1020;
				LastUpgradeCheck = 1020;
				ORGANIZATIONNAME = "Jakub Komorowski";
				TargetAttributes = {
					E4D9AC4D22AA4F3900EB4E1C = {
						CreatedOnToolsVersion = 10.2.1;
					};
					E4D9AC6122AA4F3B00EB4E1C = {
						CreatedOnToolsVersion = 10.2.1;
						TestTargetID = E4D9AC4D22AA4F3900EB4E1C;
					};
					E4D9AC6C22AA4F3B00EB4E1C = {
						CreatedOnToolsVersion = 10.2.1;
						TestTargetID = E4D9AC4D22AA4F3900EB4E1C;
					};
				};
			};
			buildConfigurationList = E4D9AC4922AA4F3900EB4E1C /* Build configuration list for PBXProject "MtG Deck Builder" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = E4D9AC4522AA4F3900EB4E1C;
			productRefGroup = E4D9AC4F22AA4F3900EB4E1C /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				E4D9AC4D22AA4F3900EB4E1C /* MtG Deck Builder */,
				E4D9AC6122AA4F3B00EB4E1C /* MtG Deck BuilderTests */,
				E4D9AC6C22AA4F3B00EB4E1C /* MtG Deck BuilderUITests */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		E4D9AC4C22AA4F3900EB4E1C /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				E4D9AC5C22AA4F3B00EB4E1C /* LaunchScreen.storyboard in Resources */,
				E4D9AC5922AA4F3B00EB4E1C /* Assets.xcassets in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		E4D9AC6022AA4F3B00EB4E1C /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		E4D9AC6B22AA4F3B00EB4E1C /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		ADB9E8BEABA74C346A4740E3 /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-MtG Deck BuilderUITests-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
		C81F9C457F2476C4DAB2ED39 /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-MtG Deck BuilderTests-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
		CBBA3AA505ABCE9D8A001904 /* [CP] Embed Pods Frameworks */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-MtG Deck Builder/Pods-MtG Deck Builder-frameworks-${CONFIGURATION}-input-files.xcfilelist",
			);
			name = "[CP] Embed Pods Frameworks";
			outputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-MtG Deck Builder/Pods-MtG Deck Builder-frameworks-${CONFIGURATION}-output-files.xcfilelist",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-MtG Deck Builder/Pods-MtG Deck Builder-frameworks.sh\"\n";
			showEnvVarsInLog = 0;
		};
		FFDE37362CD11E978B09BF0F /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-MtG Deck Builder-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		E4D9AC4A22AA4F3900EB4E1C /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				E4BBE6C92375733F0053E2D2 /* CardsListViewState.swift in Sources */,
				E4D9AC5422AA4F3900EB4E1C /* CardsListController.swift in Sources */,
				E4D9AC5222AA4F3900EB4E1C /* AppDelegate.swift in Sources */,
				E4A4764B22F441B300702AAB /* CardsResponse.swift in Sources */,
				E4E2A8A522AAB11200F845DB /* Card.swift in Sources */,
				E4BBE6C523756EF20053E2D2 /* CardsListPresenter.swift in Sources */,
				E4BBE6C723756F2B0053E2D2 /* CardsListView.swift in Sources */,
				E4E2A8A122AAAD8F00F845DB /* CardsRepository.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		E4D9AC5E22AA4F3B00EB4E1C /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				E4D9AC6722AA4F3B00EB4E1C /* MtG_Deck_BuilderTests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		E4D9AC6922AA4F3B00EB4E1C /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				E4D9AC7222AA4F3B00EB4E1C /* MtG_Deck_BuilderUITests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		E4D9AC6422AA4F3B00EB4E1C /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = E4D9AC4D22AA4F3900EB4E1C /* MtG Deck Builder */;
			targetProxy = E4D9AC6322AA4F3B00EB4E1C /* PBXContainerItemProxy */;
		};
		E4D9AC6F22AA4F3B00EB4E1C /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = E4D9AC4D22AA4F3900EB4E1C /* MtG Deck Builder */;
			targetProxy = E4D9AC6E22AA4F3B00EB4E1C /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin PBXVariantGroup section */
		E4D9AC5A22AA4F3B00EB4E1C /* LaunchScreen.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				E4D9AC5B22AA4F3B00EB4E1C /* Base */,
			);
			name = LaunchScreen.storyboard;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		E4D9AC7422AA4F3B00EB4E1C /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				CODE_SIGN_IDENTITY = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.2;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		E4D9AC7522AA4F3B00EB4E1C /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				CODE_SIGN_IDENTITY = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.2;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = iphoneos;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		E4D9AC7722AA4F3B00EB4E1C /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 50BD8F51EE26C509DC12CACC /* Pods-MtG Deck Builder.debug.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CODE_SIGN_STYLE = Automatic;
				INFOPLIST_FILE = "MtG Deck Builder/Info.plist";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = "com.jakub-komorowski.MtG-Deck-Builder";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		E4D9AC7822AA4F3B00EB4E1C /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = C65193DF0808C124383FB4F1 /* Pods-MtG Deck Builder.release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CODE_SIGN_STYLE = Automatic;
				INFOPLIST_FILE = "MtG Deck Builder/Info.plist";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = "com.jakub-komorowski.MtG-Deck-Builder";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Release;
		};
		E4D9AC7A22AA4F3B00EB4E1C /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = B3785CC3A38DC591AF3B4A52 /* Pods-MtG Deck BuilderTests.debug.xcconfig */;
			buildSettings = {
				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				INFOPLIST_FILE = "MtG Deck BuilderTests/Info.plist";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
					"@loader_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = "com.jakub-komorowski.MtG-Deck-BuilderTests";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/MtG Deck Builder.app/MtG Deck Builder";
			};
			name = Debug;
		};
		E4D9AC7B22AA4F3B00EB4E1C /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 640F311ABD532EDB71AE2C4E /* Pods-MtG Deck BuilderTests.release.xcconfig */;
			buildSettings = {
				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				INFOPLIST_FILE = "MtG Deck BuilderTests/Info.plist";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
					"@loader_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = "com.jakub-komorowski.MtG-Deck-BuilderTests";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/MtG Deck Builder.app/MtG Deck Builder";
			};
			name = Release;
		};
		E4D9AC7D22AA4F3B00EB4E1C /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 3989EEA04631FFD3F6AC5133 /* Pods-MtG Deck BuilderUITests.debug.xcconfig */;
			buildSettings = {
				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
				CODE_SIGN_STYLE = Automatic;
				INFOPLIST_FILE = "MtG Deck BuilderUITests/Info.plist";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
					"@loader_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = "com.jakub-komorowski.MtG-Deck-BuilderUITests";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
				TEST_TARGET_NAME = "MtG Deck Builder";
			};
			name = Debug;
		};
		E4D9AC7E22AA4F3B00EB4E1C /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 28B9CF37B20D88347EFFA06D /* Pods-MtG Deck BuilderUITests.release.xcconfig */;
			buildSettings = {
				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
				CODE_SIGN_STYLE = Automatic;
				INFOPLIST_FILE = "MtG Deck BuilderUITests/Info.plist";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
					"@loader_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = "com.jakub-komorowski.MtG-Deck-BuilderUITests";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
				TEST_TARGET_NAME = "MtG Deck Builder";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		E4D9AC4922AA4F3900EB4E1C /* Build configuration list for PBXProject "MtG Deck Builder" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				E4D9AC7422AA4F3B00EB4E1C /* Debug */,
				E4D9AC7522AA4F3B00EB4E1C /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		E4D9AC7622AA4F3B00EB4E1C /* Build configuration list for PBXNativeTarget "MtG Deck Builder" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				E4D9AC7722AA4F3B00EB4E1C /* Debug */,
				E4D9AC7822AA4F3B00EB4E1C /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		E4D9AC7922AA4F3B00EB4E1C /* Build configuration list for PBXNativeTarget "MtG Deck BuilderTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				E4D9AC7A22AA4F3B00EB4E1C /* Debug */,
				E4D9AC7B22AA4F3B00EB4E1C /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		E4D9AC7C22AA4F3B00EB4E1C /* Build configuration list for PBXNativeTarget "MtG Deck BuilderUITests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				E4D9AC7D22AA4F3B00EB4E1C /* Debug */,
				E4D9AC7E22AA4F3B00EB4E1C /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = E4D9AC4622AA4F3900EB4E1C /* Project object */;
}
